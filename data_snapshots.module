<?php

include_once 'data_snapshots.fields.data_snapshot_data_source.inc';
include_once 'data_snapshots.fields.data_snapshot.inc';
include_once 'data_snapshots.field_groups.inc';
include_once 'data_snapshots.import.inc';

/**
 * Implements hook_ctools_plugin_api().
 *
 * This is necessary for our field_group settings to work.
 */
function data_snapshots_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }    
  if ($module == "feeds" && $api == "feeds_importer_default") {
    return array("version" => 1);
  }
}

/*
 * Implements hook_node_info().
 *
 * Here is where we declare the contents types that our module defines.
 */
function data_snapshots_node_info() {
  $items = array(
		 //REMOVE
    'data_snapshot_data_source' => array(
      'name' => t('Data Snapshot Data Source'),
      //NOTE: the setting for 'base' seems to determine (at least) two things:
      //      (a) the prefix for forming the names of hook functions for this
      //          content type; e.g. if 'base' => 'BASE', then we can
      //          implement BASE_load(), BASE_view(), etc, and Drupal will
      //          call them when dealing with a node of this content type
      //      (b) whether or not this content type appears in the list of
      //          editable content types in the admin menu at
      //            Administration >> Structure >> Content Types
      //          Note however, that regardless of whether this content type
      //          appears in the list, you can always navigate directly
      //          to the URL for editing it at
      //             admin/structure/types/manage/data-snapshot-data-source
      'base' => 'data_snapshots',
      //'base' => 'node_content',
      'description' => t('Content type for Data Snapshot Data Sources'),
      'has_title' => '1',
      'title_label' => t('Public Name for Dataset'),
      'help' => '',
    ),
    //REMOVEEND
    'data_snapshot' => array(
      'name' => t('Data Snapshot'),
      'base' => 'data_snapshots',
      'description' => t('Content type for Data Snapshots'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/**
 * Implements hook_insert()
 */
// Q: Why is guid '???'?
// Q: What are the translations of these fields?
// Q: What does hook_insert do?
function data_snapshots_insert($node) {
  if ($node->type == "data_snapshot") {
    db_insert('data_snapshots')
      ->fields(array(
        'nid'  => $node->{'nid'},
        'guid' => "???",
        'dsmn' => $node->{'field_ds_dsds_mn'}['und'][0]['value'],
        'ptk'  =>$node->{'field_ds_ptk'}['und'][0]['value'],
        'stk'  =>$node->{'field_ds_stk'}['und'][0]['value']
      ))
      ->execute();
  }
}

/**
 * Implements hook_update()
 */
// Q: Why is guid '???'?
// Q: What are the translations of these fields?
// Q: What does hook_update do?
function data_snapshots_update($node) {
  if ($node->type == "data_snapshot") {
    db_update('data_snapshots')
      ->fields(array(
        'guid' => "???",
        'dsmn' => $node->{'field_ds_dsds_mn'}['und'][0]['value'],
        'ptk'  =>$node->{'field_ds_ptk'}['und'][0]['value'],
        'stk'  =>$node->{'field_ds_stk'}['und'][0]['value']
      ))
      ->condition('nid', $node->{'nid'})
      ->execute();
  }
}

/**
 * Implements hook_form()
 */
// Q: What does hook form do?
// Q: WHat is node_content_form?
function data_snapshots_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_theme()
 */
// Probably need to remove this and move this functionality back to display suite
function data_snapshots_theme($existing, $type, $theme, $path) {
  return array (
    'node__data_snapshot' => array(      # when theming nodes of type data_snapshot,
      'template' => 'templates/data-snapshot',     #     use data-snapshot.tpl.php 
    ),
    'data-snapshot-sidebar' => array(          # when theme() is called like
      'template' => 'templates/data-snapshot-sidebar',   #   theme('data-snapshot-sidebar',...),
      'variables' => array(                    #   use data-snapshot-sidebar.tpl.php
        'data_set_name' => NULL,               #   along with these variables
        'data_set_number' => NULL
      )
    ),
  );
}

/*
 * Implements hook_load()
 *
 * Note that we don't actually need this, at the moment, but I'm leaving it in here commented
 * out as a reminder that we can use it if/when it turns out we need to.  hook_load() allows
 * us to arrange for arbitrary things to happen each time a node of one of our content types
 * is loaded; we can modify the $node object here to insert whatever we want (within reason).
 *
function data_snapshots_load($nodes) {
  //dsm("***********   data_snapshots_load   *************************\n");
  //dsm($nodes);
  //NOTE: hook_load() does not (need to) return anything
}
*/

/*
 * I'm really not sure what the correct way to fetch a node field value is,
 * but this seems to work.  There has to be a better way, though.
 */
// Q: This is for the following view I think??
function _get_field_value($node, $field) {
  $q = field_get_items('node', $node, $field);
  return $q[0]['value'];
}


/**
 * Implements hook_view()
 *
 * This gets called before rendering any nodes defined in our hook_node_info() above for
 * which base=data_snapshots.  We can use this to modify the node object before it is
 * rendered.
 *
 * This funtion should ALWAYS return $node!!!
 *
 * What the @#$%&*# !!!???
 *
 *   The mere presence of this hook apparently changes the structure of the contents
 *   of the $node object that gets passed to the template file.  When this hook is
 *   NOT present, field values are available like:
 *       $node->{'field_ds_year'}['und'][0]['value']
 *   When this hook is present, though, the 'und' layer disappears, so the same field
 *   becomes
 *       $node->{'field_ds_year'}[0]['value']
 *   This happens regardless of what this function (data_snapshots_view) does --
 *   in particular, simply creating a data_snapshots_view function that just
 *   does "return $node" causes this.
 *
 *   Note, however, that this is true only for the $node object that
 *   gets passed to the *.tpl.php, however.  The $node object passed to
 *   data_snapshots_view() here DOES have the 'und' layer.
 *
 * UPDATE:
 *
 *   Well, it seems that making a few other changes, such as setting
 *   some fields in $node->content below, and adding another tpl.php
 *   for theming that content, caused the 'und' level to reappear.
 *
 *   The moral of this story is that whenever you change anything
 *   here, better re-examine how everything looks and fix anything
 *   that breaks!
 *
 *   Isn't Drupal wonderful!!
 *
 * ANOTHER UPDATE:
 *
 * Holy shit!  Simply including "dsm($node)" at the top of
 * data_snapshots_view() changes the structure of the $node object
 * that is available to the template file!!!
 */
// Q: what do these fields translate to?
// Q: figure out if there is a better place for the drupal_add_[css|js]?
// Q: I think there are a few more parameters which help with the previous function and caching?
function data_snapshots_view($node, $view_mode) {
  drupal_add_css(drupal_get_path('module', 'data_snapshots') . "/css/data-snapshots.css");
  drupal_add_css(drupal_get_path('module', 'data_snapshots') . "/js/jquery-ui/jquery-ui-1.10.3/themes/base/jquery.ui.all.css");

  drupal_add_js(drupal_get_path('module', 'data_snapshots') . "/js/data_snapshots.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1001));
  drupal_add_js("if (jQuery !== undefined) { jQuery_old = jQuery; }",
                array('type' => 'inline', 'scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1002));
  drupal_add_js(drupal_get_path('module', 'data_snapshots') . "/js/jquery-ui/jquery-ui-1.10.3/jquery-1.9.1.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1003));
  drupal_add_js(drupal_get_path('module', 'data_snapshots') . "/js/jquery-ui/jquery-ui-1.10.3/ui/jquery-ui.js",
                array('scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1004));
  drupal_add_js("data_snapshots(jQuery); if (jQuery_old !== undefined) { jQuery = jQuery_old; }",
                  array('type' => 'inline', 'scope' => 'header', 'group' => JS_DEFAULT, 'weight' => 1005));

  $dsds_mn = _get_field_value($node, 'field_ds_dsds_mn');
  if ($dsds_mn) {
    if ($node->type == "data_snapshot" && $view_mode == "full") {
      $dataset_nid = db_select('field_data_field_dsds_mn', 'f')
        ->condition('field_dsds_mn_value', $dsds_mn)
        ->fields('f', array('entity_id'))
        ->execute()
        ->FetchField();
      if ($dataset_nid != FALSE) {
        $node->{'dataset_node'} = node_load($dataset_nid);
      }

      $rows = db_select('data_snapshots', 'ds')
        ->fields('ds', array('nid','ptk','stk'))
        ->condition('dsmn', $dsds_mn)
        ->orderBy('ds.ptk', 'ASC')
        ->orderBy('ds.stk', 'ASC')
        ->execute()
        ->fetchAll();
      $snapshots = array();
      if (!empty($rows)) {
        $ptk = null;
        $ptks = array();
        foreach ($rows as $row) {
          if ($row->{'ptk'} != $ptk) {
            $snapshots[$row->{'ptk'}] = array();
            $ptk = $row->{'ptk'};
            $ptks[] = $ptk;
          }
          $snapshots[$ptk][] = $row->{'stk'};
        }
      }

      $settings = array(
        'snapshots' => array(
          'dsmn' => $dsds_mn,
          'p' => $ptks,
          's' => $snapshots
        )
      );


      drupal_add_js(array('data_snapshots' => $settings), 'setting');
      // So now, we can access the $snapshots array from JS in the page as:
      //      Drupal.settings.data_snapshots.snapshots
    }
  }
  return $node;
  //NOTE: hook_view MUST return $node
}

// Q: What does this do?
function data_snapshots_node_type_insert($content_type) {

  if ($content_type->type == 'data_snapshot') {
    // First we add the body field. Node API helpfully gives us
    // node_add_body_field().
    // We'll set the body label now, although we could also set
    // it along with our other instance properties later.
    $body_instance = node_add_body_field($content_type, t('About This Date'));

    // Save our changes to the body field instance.
    field_update_instance($body_instance);

    foreach (data_snapshots_fields_data_snapshot() as $field) {
      field_create_field($field['field_config']);
      $instance = $field['field_instance'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'data_snapshot';
      field_create_instance($instance);
    }
  }

  // Q: is this block needed?
  if ($content_type->type == 'data_snapshot_data_source') {
    foreach (data_snapshots_fields_data_snapshot_data_source() as $field) {
      field_create_field($field['field_config']);
      $instance = $field['field_instance'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'data_snapshot_data_source';
      field_create_instance($instance);
    }
  }

}

/**
 * Implements hook_menu().
 */
// Q: what exactly is being put into the menu?
function data_snapshots_menu() {

  $items['data-snapshots/ajax'] = array(
    'type' => MENU_CALLBACK,
    'title' => 'Callback Only',
    'page callback' => '_data_snapshots_ajax',
    'page arguments' => array(t('The menu entry for this page is of type MENU_CALLBACK, so it provides only a path but not a link in the menu links, but it is the same in every other way to the simplest example.')),
    'access callback' => TRUE,
  );

  return $items;
}

function _data_snapshots_ajax() {
  global $user;
  $received = file_get_contents("php://input");
  $json = json_decode($received, TRUE);

  //
  // Assume that we received a json object whose "guid" property is a guid from
  // the feeds_item table.  Look up the nid corresponding to it.
  //
  // select entity_id from feeds_item where guid='droutlook-2013-06-18' ;
  $nid = db_select('feeds_item', 'fi')
    ->condition('guid', $json['guid'])
    ->fields('fi', array('entity_id'))
    ->execute()
    ->FetchField();

  //
  // And serve back the contents of that nid's node as the response
  //
  if ($nid != FALSE) {
    // we don't technically need to load the whole node here -- optimize later to directly query
    // only the relevant fields tables
    $node = node_load($nid);
    $obj = array(
      'user' => $user,
      'request' => $json,
      'node' => array(
        'nid' => $nid,
        'stk' => $node->{'field_ds_stk'}['und'][0]['value'],
        'ptk' => $node->{'field_ds_ptk'}['und'][0]['value'],
        'img' => $node->{'field_ds_disimg'}['und'][0]['url'],
        'about' => $node->{'body'}['und'][0]['value']
        )
    );
  } else {
    $obj = array(
      'user' => $user,
      'request' => $json,
      'error' => 'node not found'
    );
  }
  drupal_json_output($obj);
  exit();
}
